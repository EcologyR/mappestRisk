% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_risk.R
\name{map_risk}
\alias{map_risk}
\title{Map pest risk}
\usage{
map_risk(
  t_vals = NULL,
  t_rast = NULL,
  region = NULL,
  res = 2.5,
  path = NULL,
  mask = TRUE,
  verbose = FALSE,
  plot = TRUE,
  interactive = FALSE
)
}
\arguments{
\item{t_vals}{a \code{data.frame} or \code{\link[dplyr:reexports]{dplyr::tibble()}} inherited from \code{\link[=therm_suit_bounds]{therm_suit_bounds()}}
function without any further modification. It must contain at least one row
of numeric values. Additionally, the minimum ("left") thermal boundary or \code{tval_left}
must be lower than the maximum ("right") one, or \code{tval_right} for all rows.
Nominative columns must be present in the input (i.e., \code{model_name},
\code{suitability}, \code{pred_suit} and \code{iter}).}

\item{t_rast}{Optional 12-layer \code{\link[terra:SpatRaster-class]{terra::SpatRaster()}} with monthly mean
temperatures for (at least) the target 'region'. If not provided, global
WorldClim raster layers will be automatically (down)loaded and cropped to
'region' using \code{\link[geodata:worldclim]{geodata::worldclim_global()}}.
Note that the download can be slow the first time you use the function in a new
\code{path}. If you get a download error, consider running e.g \code{options(timeout = 500)} (or more).}

\item{region}{Mandatory object specifying the region to map. Must overlap the
extent of \code{t_rast} if both are provided. Can be a \code{\link[terra:SpatVector-class]{terra::SpatVector()}}
polygon map (obtained with \code{\link[terra:vect]{terra::vect()}}); or an \code{\link[sf:sf]{sf::sf()}} polygon map
(obtained with \code{\link[sf:st_as_sf]{sf::st_as_sf()}}), in which case it will be coerced with
\code{\link[terra:vect]{terra::vect()}}) to a \code{\link[terra:SpatVector-class]{terra::SpatVector()}}; or a character vector of country
name(s) in English, in which case a countries map will be downloaded and
subset to those countries; or a \code{\link[terra:SpatExtent-class]{terra::SpatExtent()}} object (obtained with
\code{\link[terra:ext]{terra::ext()}}); or a numeric vector of length 4 specifying the region
coordinates as folows: \code{c(xmin, xmax, ymin, ymax)}. The latter two must be in
the same CRS as\code{t_rast} if \code{t_rast} is provided, or in unprojected lon-lat
coordinates (WGS84, EPSG:4326) otherwise. If NULL, the output maps will
cover the entire \code{t_rast} if provided, or the entire world otherwise.}

\item{res}{Argument to pass to \code{\link[geodata:worldclim]{geodata::worldclim_global()}} specifying
the spatial resolution for the raster maps to download, if 't_rast' is not
provided. The default is 2.5 arc-minutes. Beware that lower values (e.g., 0.5)
may lead to extremely heavy data sets and large computation times.}

\item{path}{Argument to pass to \code{\link[geodata:worldclim]{geodata::worldclim_global()}} (if \code{t_rast}
is not provided) and/or to \code{\link[geodata:world]{geodata::world()}} (if 'region' is a vector of
country names) specifying the folder path for the downloaded maps.}

\item{mask}{Logical value to pass to \code{\link[terra:crop]{terra::crop()}} specifying whether the
output raster maps should be masked with the borders of the target 'region',
if this is a polygon map or a vector of country names. The default is TRUE.
If FALSE, the entire rectangular extent of 'region' will be used.}

\item{verbose}{Logical value specifying whether to display messages about
what the function is doing at possibly slow steps. The default is FALSE.
Setting it to TRUE can be useful for checking progress when maps are large.}

\item{plot}{Logical value specifying whether to plot the results in a map.
Defaults to TRUE. Note that the function will always return a \code{\link[terra:SpatRaster-class]{terra::SpatRaster()}}
object even if \code{plot = TRUE}.}

\item{interactive}{Logical value specifying whether the plotted map should be
interactive (if plot=TRUE). The default is TRUE if the 'leaflet' package is installed.}
}
\value{
This function returns a \code{\link[terra:SpatRaster-class]{terra::SpatRaster()}} with up to 2 layers:
the (\code{\link[=mean]{mean()}}) number of months with temperature within the species' thermal
bounds; and (if \code{t_vals} has >1 rows) the standard deviation (\code{\link[stats:sd]{stats::sd()}}) around
that mean.
}
\description{
This function produces a raster map where each pixel shows the number of
months per year in which temperature is within a given set of bounds. If
the input has several pairs of minimum and maximum temperatures (e.g. as
produced by \code{\link[=therm_suit_bounds]{therm_suit_bounds()}}), the output raster has two layers: mean
and standard deviation.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

\dontrun{
data("aphid")

# 1. fit TPC models:
fitted_tpcs_aphid <- fit_devmodels(temp = aphid$temperature,
                                        dev_rate = aphid$rate_value,
                                        model_name = "all")
# 2. plot them
plot_devmodels(temp = aphid$temperature,
               dev_rate = aphid$rate_value,
               fitted_parameters = fitted_tpcs_aphid,
               species = "Brachycaudus schwartzi",
               life_stage = "Nymphs") #choose "lactin2"

# 3. obtain predictions and uncertainties

tpc_preds_boots_aphid <- predict_curves(temp = aphid$temperature,
                                             dev_rate = aphid$rate_value,
                                             fitted_parameters = fitted_tpcs_aphid,
                                             model_name_2boot = "lactin2",
                                             propagate_uncertainty = TRUE,
                                             n_boots_samples = 10)

head(tpc_preds_boots_aphid)

# 4. plot predictions and uncertainties

plot_uncertainties(bootstrap_uncertainties_tpcs = tpc_preds_boots_aphid,
                   temp = aphid$temperature,
                   dev_rate = aphid$rate_value,
                   species = "Brachycaudus schwartzi",
                   life_stage = "Nymphs")

# 5. Calculate thermal suitability boundaries

boundaries_aphid <- therm_suit_bounds(preds_tbl = tpc_preds_boots_aphid,
                                             model_name = "lactin2",
                                             suitability_threshold = 80)
head(boundaries_aphid)

# 6. Extract and Plot Risk maps

# if you don't have temperature rasters for your region:

 risk_rast_reunion <- map_risk(t_vals = boundaries_aphid,
                               path = tempdir(), # directory to download data
                               region = "RÃ©union",
                               mask = TRUE,
                               plot = TRUE,
                               interactive = FALSE,
                               verbose = TRUE)

# Alternative 1: if you already have a raster of monthly average temperatures
# for your region of interest, you can use that as input for `t_rast`:
   ## first, load it
   tavg_file <- system.file("extdata/tavg_reunion.tif", package = "mappestRisk")

   ## second, rasterize it with `terra`
 tavg_rast <- terra::rast(tavg_file)

   ## third apply the function
 risk_rast_reunion <- map_risk(t_vals = boundaries_aphid,
                               t_rast = tavg_rast,
                               mask = TRUE,
                               path = tempdir(),
                               plot = TRUE,
                               interactive = FALSE,
                               verbose = TRUE)
 # Alternative 2: you can use your own spatial feature (sf) object for `region`
andalucia_sf <- readRDS(system.file("extdata",
                                    "andalucia_sf.rds",
                                    package = "mappestRisk"))

risk_rast_andalucia <- map_risk(t_vals = boundaries_aphid,
                                region = andalucia_sf,
                                path = tempdir(),
                                mask = TRUE,
                                plot = TRUE,
                                interactive = FALSE,
                                verbose = TRUE)
}
\dontshow{\}) # examplesIf}
}

[{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ecologyr.github.io/mappestRisk/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ecologyr.github.io/mappestRisk/articles/tpcs-model-fitting.html","id":"fit-a-thermal-performance-curve-tpc-to-your-data","dir":"Articles","previous_headings":"","what":"Fit a thermal performance curve (TPC) to your data:","title":"TPCs model fitting","text":"Thermal Performance Curves can understood models describing nonlinear temperature dependence several biological rates (Amarasekare Savage 2012). TPC shapes usually unimodal left-skewed (Huey Stevenson 1979), also case development rate TPCs insects (Régnier, Legrand, Rebaudo 2022). Fitting nonlinear regression models requires incorporate priori knowledge model parameters. purpose, R packages rTPC (Padfield, O’Sullivan, Pawar 2021; Padfield, O’Sullivan, Windram 2025)devRate(Francois Rebaudo Regnier 2025; François Rebaudo, Struelens, Dangles 2018) provided R functions workflows facilitate model fitting, start values selection parameter calculation TPCs. Additionally, nls.multstart package (Padfield, O’Sullivan, Pawar 2021; Padfield, Matheson, Windram 2025) provides nonlinear, least-squares framework facilitate fitting curves experimental data flexible efficient manner. However, believe researchers obtaining experimental data rate development across temperatures may enough R programming knowledge accomplish repeteadly model fitting procedure reproducible workflows. Aiming facilitate usage previous contributions made -mentioned R packages TPC modelling broad-audience among experimental researchers, mappestRisk aims synthesize software development unique function called fit_devmodels(). function takes input data.frame tibble containing two numeric columns: one temperature data –least 4 unique temperature treatments– development rate data. user can select models fit among included available_models (use ). , model equation, function search appropriate start values data performing nonlinear regression models using rTPC::get_start_vals() possible, alternatively devRate parameter data set models included former package. selected, function also search lower upper thermal limits possible using rTPC::get_lower_lims() rTPC::get_upper_lims(). Next, function performs sequentially nonlinear least-squares regression models using nls.multstart::nls_multstart() function set model equation, start values limits default configuration nls_multstart approach (see function documentation ). TPC models achieving convergence discarded. example, ’ll show fit one several thermal performance curves data set development rate variation across temperatures1. following code provides example given fit_devmodels() function documentation, data table showing output fitted models. running fit_devmodels(), tibble (specific case data.frame) created containing relevant statistical information modelled TPCs: model name, parameter information –name, estimates, standard error, AICs listed model objects.continue package workflow, output must stored object (call fitted_tpcs_aphid). tibble following aspect: Despite output yields table explicit statistical information model objects implicit additional information, selecting model better guided ecological, rather statistical criteria. typically involves visualising predictions fitted TPCs visual examination. potential user package may use expertise thermal biology ecology species distinguish fitted TPCs accomplish approximate true temperature-development relationships. example, fitted TPC model yielding critical thermal maximum beyond 50ºC –.e., right-side vertical x-axis cutoff– may realistic, species encounter temperatures. Similarly, models yielding quasi-symmetric TPCs unexpected behaviors regions curve may also discarded. strongly believe straightforward statistical strategy select among TPC models; instead, comparing large number fitted TPCs expertise ecological criteria may improve biological realism model selection reduce arbitrariety. Finally, accounting thermal regimes species likely encounter region interest project risk may help select among curves prioritizing curves specific expected behaviors theTPC regions corresponding thermal regimes. plot_devmodels() function facilitates quick visualizations predictions Thermal Performance Curves guide model selection ecological criteria. takes input resulting tibble/data.frame stored object fit_devmodels(). also arguments title subtitle figure species’ name life stage evaluated, respectively. Since wrapped ggplot2 approach, customization available adding new lines compatible functions ggplot2. Following previous example:  can see, plot faceted across TPC models included fitted_tpcs_aphid.","code":"data(\"aphid\")  fitted_tpcs_aphid <- fit_devmodels(temp = aphid$temperature,                                    dev_rate = aphid$rate_value,                                    model_name = \"all\") #> By default, all models are fitted except `ratkowsky`, `mod_polynomial` and `wang` due to #> unrealistic behavior at some TPC regions. If you still want to fit them, please write all model names manually #> fitting model beta #> fitting model boatman #> fitting model briere1 #> Poorly informative start values for briere1 model #> fitting model briere2 #> fitting model joehnk #> fitting model kamykowski #> fitting model lactin1 #> fitting model lactin2 #> fitting model mod_weibull #> fitting model oneill #> fitting model pawar #> fitting model schoolfield #> fitting model thomas print(fitted_tpcs_aphid) #> # A tibble: 53 × 8 #>    model_name param_name start_vals param_est    param_se model_AIC model_BIC #>    <chr>      <chr>           <dbl>     <dbl>       <dbl>     <dbl>     <dbl> #>  1 beta       a               0.145     0.143     0.00630     -43.0     -43.3 #>  2 beta       b              25        26.7       1.10        -43.0     -43.3 #>  3 beta       c              25       202.    13598.          -43.0     -43.3 #>  4 beta       d               2       100     12046.          -43.0     -43.3 #>  5 beta       e               2        32.6    2282.          -43.0     -43.3 #>  6 boatman    rmax            0.145     0.142     0.00648     -42.4     -42.7 #>  7 boatman    tmin           15         0       104.          -42.4     -42.7 #>  8 boatman    tmax           32.5      43.7      66.7         -42.4     -42.7 #>  9 boatman    a               1.1       1.42      1.03        -42.4     -42.7 #> 10 boatman    b               0.4       2.44     20.0         -42.4     -42.7 #> # ℹ 43 more rows #> # ℹ 1 more variable: model_fit <list> plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs_aphid,                species = \"Brachycaudus schwartzi\",                life_stage = \"nymphs\")"},{"path":[]},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/articles/tpcs-simulate-bootstrap.html","id":"why-propagating-uncertainty","dir":"Articles","previous_headings":"Simulate nn-thermal performance curves using bootstrap with residual resampling","what":"Why propagating uncertainty?","title":"Simulate TPCs with bootstrap to propagate uncertainty","text":"Forecasting necessarily incorporates uncertainties much know knowledge target system (.e., model structure, parameter uncertainty, response predictor variable errors, etc) adds together uncertainty communicate findings unavoidable randomness within natural systems (Simmonds et al. 2022). least three different uncertainty sources models addressed forecasts: Parameter uncertainty: accuracy estimated parameters models may affect confidence predictions. example TPCs model fitting article, briere2 model yields CTmax=36.5±3.40ºCCT_\\max=36.5\\pm3.40 \\ \\textrm{ºC}. Let’s imagine forecaster aiming identify “safe” regions pest may established due extremely high maximum temperatures (e.g., Tmax>CT‾maxT_\\max > \\bar{CT}_\\max). ’s possible forecasting regions monthly maximum temperatures 34ºC, lie CTmaxCT_\\max estimate 36.5 ºC, leading identify risk assessment. However, incorporate uncertainty parameter contributes variability predicted TPC simulated TPC ribbons plot –see e.g., plot_uncertainties(), possible scenarios several TPC-calculated CTmaxCT_\\max’s lie 34ºC, yielding -negligible risk likelihood. Predictor uncertainty: incorporating variability predictor –case, monthly maximum temperatures– also yield probability distribution forecast outcomes (let’s say Tmax=34ºC,CI=[31.2,36.8]T_\\max = 34 \\textrm{ºC}, \\ CI =[31.2, 36.8]). result scenarios maximum temperatures CTmaxCT_\\max estimate 36.536.5ºC others . Source data uncertainty: additionally, TPCs usually fitted summarized data experiments laboratory conditions. measures incorporate mesasurement error (individual level) uncertainty measures summarizing variability rate estimates population level. now, mappestRisk enables explicitly account parameter uncertainty simulating nn TPCs using bootstrapping techniques residual resampling, suggested implemented rTPC package (see vignette/article (Padfield, O’Sullivan, Windram 2025)) described section . Measurement uncertainty source data might incorporated future enhancement updates package weights argument fit_devmodels() predict_curves() (Padfield, O’Sullivan, Pawar 2021) since based rTPC - nls.multstart framework recently incorporated article simulate curves weighted bootstrapping. Finally, discussion deal predictor uncertainty forecasts overcome communication uncertainty given generate-risk-maps vignette article.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/articles/tpcs-simulate-bootstrap.html","id":"simulate-bootstrapped-tpcs-with-predict_curves","dir":"Articles","previous_headings":"Simulate nn-thermal performance curves using bootstrap with residual resampling","what":"Simulate bootstrapped TPCs with predict_curves()","title":"Simulate TPCs with bootstrap to propagate uncertainty","text":"mentioned , mappestRisk includes two functions automate workflow suggested rTPC package simulate curves propagating parameter uncertainty. implemented residual resampling method following rTPC vignete suggestions, raw resampling code workflow rather using car::Boot() function simplicity. opted residual resampling rather case resampling bootstrapping method predictor data controlled experimental researchers usually data points per curve, low representation hot decay TPC region source data make many case resampling iterations difficult refitting new TPC models. insights methodology, please refer original rTPC vignette. updates package may incorporate variance modelling heteroskedastic residuals, well argument choice residual resampling case resampling1. predict_curves() function incorporates temperature development rate data arguments, fitted_parameters argument requires input table obtained fit_devmodels(), model_name_2boot argument choose TPC model(s) bootstrap along available fitted_parameters number bootstrap samples, n_boots_samples. function implicitly extracts residuals fitted values estimated TPC fit_devmodels(). , resamples replacement residuals. Next, function automatically calculates new resampled observations iteration ii (.e., yiy_i) follows: yi=ŷ+ei,y_i = \\hat{y} + e_i \\ \\ , yî\\hat{y_i} represent fitted values TPC model eie_i denotes resampled residuals model. Note ii-th iteration given n_boots_samples, nn. results nn resampled data sets. next used fitting new nonlinear model using fit_devmodels(); adequately converged (total kk models) constitute newly bootstrapped nonlinear regression model. Finally, function calculates predictions bootstrapped models along temperature data –specifically, 20ºC 15ºC minimum maximum temperature values, respectively, temp argument 0.01ºC. results total n−kn-k simulated thermal performance curves used propagating parameter uncertainty inference. example: default, predict_curves function propagate uncertainty simulating many curves asked n_boots_samples argument selected models model_name_2boot. able perform bootstrap, default configuration output tibble simulated TPCs ploting purposes thermal traits calculation. n_boots_samples set 100 default. recommend avoid lower values may inaccurately reflect uncertainty think carefully trying perform bootstrap larger samples, since may exponentially increase computational demands little benefit purposes addressed . propagate_uncertainty set FALSE, function output tibble one single curve (temperatures predictions) coming estimated TPC (similar plotted plot_devmodels()applying subsequent steps mappestRisk suggested workflow. tibble output predict_curves can easily visualized plot_uncertainties(), curve model estimate plotted thicker, dark orange line bootstrapped curves depicted slighter, dark blue lines composing sort ribbon central curve. one model succesfully bootstrapped, predicted curves plotted along different facets.  simulated TPCs may guide ecologically realistic model selection propagating parameter uncertainty subsequent analyses. However, plot_devmodels(), discourage selecting among TPC models solely based statistical information, rather informed ecological criteria. Please, consider carefully whether data suitable procedures.","code":"#fit previously: data(\"aphid\") fitted_tpcs_aphid <- fit_devmodels(temp = aphid$temperature,                                    dev_rate = aphid$rate_value,                                    model_name = \"all\") preds_boots_aphid <- predict_curves(temp = aphid$temperature,                                              dev_rate = aphid$rate_value,                                    fitted_parameters = fitted_tpcs_aphid,                                    model_name_2boot = c(\"briere2\", \"lactin2\"),                                    propagate_uncertainty = TRUE,                                    n_boots_samples = 10) #> Warning in predict_curves(temp = aphid$temperature, dev_rate = #> aphid$rate_value, : 100 iterations might be desirable. Consider increasing #> `n_boots_samples` if possible #>  #> Note: the simulation of new bootstrapped curves takes some time. Await patiently or reduce your `n_boots_samples` #>  #>  Bootstrapping simulations completed for briere2 #>  #>  Bootstrapping simulations completed for lactin2 plot_uncertainties(bootstrap_tpcs = preds_boots_aphid,                    temp = aphid$temperature,                    dev_rate = aphid$rate_value,                    species = \"Brachycaudus schwartzi\",                    life_stage = \"Nymphs\")"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Darío San-Segundo  Molina. Author, maintainer. . Márcia Barbosa. Author. Antonio Jesús Pérez-Luque. Author. Francisco Rodríguez-Sánchez. Author.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"San-Segundo  Molina D, Barbosa , Pérez-Luque , Rodríguez-Sánchez F (2025). mappestRisk: R package modelling mapping risk pest development based known thermal limits. https://ecologyr.github.io/mappestRisk.","code":"@Manual{,   title = {mappestRisk: An R package for modelling and mapping risk of pest development based on   known thermal limits},   author = {Darío {San-Segundo  Molina} and A. Márcia Barbosa and Antonio Jesús Pérez-Luque and Francisco Rodríguez-Sánchez},   year = {2025},   url = {https://ecologyr.github.io/mappestRisk}, }"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"aims-of-the-package","dir":"","previous_headings":"","what":"Aims of the package","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"goal mappestRisk package facilitate transition development data arthropod crop-pests’ thermal biology obtained lab-controlled conditions understandable forecasts assessing risk pest occurrence given region. Closing gap usually involves two key steps: (1) fitting selecting nonlinear regression models derived thermal traits ecological criteria, (2) projecting traits onto interest regions pest risk assessment extracting climate data. However, data producers physiology labs limited opportunities time develop R programming skills, addressing two steps may straightforward. purpose, mappestRisk intends facilitate workflow researcher minimal, basic R programming skills. package built upon previous efforts devRate (François Rebaudo, Struelens, Dangles 2018), rTPC nls.multstart packages (Padfield, O’Sullivan, Pawar 2021) methodology predicting climatic suitability based fundamental thermal niche estimated thermal performance curves, suggested Taylor et al. (2019) . date, mappestRisk built modelling developmental thermal performance curves, since commonly measured life-history trait experimental approaches major contributions fitness dependence temperature (Pawar et al. 2024) also allows predict phenologies (Schmalensee et al. 2021). Therefore, mappestRisk three different modules: (1) model fitting & selection using set commonly used equations describing developmental responses temperature nls.multstart framework (Padfield Matheson 2020) using equation helpers rTPC(Padfield O’Sullivan 2023) devRate (Francois Rebaudo Regnier 2024), visualization model fitting help model selection user; (2) calculation suitability thermal limits, consist temperature interval delimiting optimal performance zone suitability; (3) climatic data extraction & visualization either exportable rasters static interactive map figures.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"mappestRisk package can installed r-universe: GitHub repository:","code":"install.packages('mappestRisk', repos = c('https://ecologyr.r-universe.dev', 'https://cloud.r-project.org')) remotes::install_github(\"EcologyR/mappestRisk\")"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"id_1-fit-thermal-performance-curves-tpc-to-your-data-and-plot-results-and-parameter-uncertainty","dir":"","previous_headings":"Example: mappestRisk workflow","what":"1. Fit thermal performance curves (TPC) to your data and plot results and parameter uncertainty:","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"example, ’ll show fit one several thermal performance curves data set development rate variation across temperatures1. following code provides example given fit_devmodels() function documentation, data table showing output fitted models, visualize selecting curves using plot_devmodels().  complete explanation example model fitting visualization, see TPCs model fitting article. Additionally, recommend propagate uncertainty parameter estimation fitted selected TPC models using bootstrap procedures residual resampling, following vignettes rTPC package (Padfield, O’Sullivan, Pawar 2021). can done function predict_curves() setting argument propagate_uncertainty TRUE. Resulting predictions can plotted using plot_uncertainties(). detailed explanation given TPCs model fitting article.","code":"library(\"mappestRisk\") data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                                dev_rate = aphid$rate_value,                               model_name = c(\"briere2\", \"lactin2\", \"ratkowsky\"))  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus schwartzi\",                life_stage = \"Nymphs\") preds_boots <- predict_curves(temp = aphid$temperature,                                         dev_rate = aphid$rate_value,                               fitted_parameters = fitted_tpcs,                               model_name_2boot = c(\"briere2\", \"lactin2\"),                               propagate_uncertainty = TRUE,                               n_boots_samples = 10) #>  #> Note: the simulation of new bootstrapped curves takes some time. Await patiently or reduce your `n_boots_samples` #>  #>  Bootstrapping simulations completed for briere2 #>  #>  Bootstrapping simulations completed for lactin2  plot_uncertainties(bootstrap_tpcs = preds_boots,                    temp = aphid$temperature,                    dev_rate = aphid$rate_value,                    species = \"Brachycaudus schwartzi\",                    life_stage = \"Nymphs\")"},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"id_2-calculate-thermal-suitability-bounds","dir":"","previous_headings":"Example: mappestRisk workflow","what":"2. Calculate thermal suitability bounds:","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"previous steps, user can calculate thermal boundaries optimal zone TPC –.e., temperature values yielding Y-th quantile development rate (default $`\\mathrm{Q}_{75}`$) sides curve peak $`R_\\max`$. model selected ecological statistical criteria, thermal_suitability_bounds() function calculates values:","code":"boundaries <- therm_suit_bounds(preds_tbl = preds_boots,                                 model_name = \"briere2\",                                         suitability_threshold = 80)"},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"id_3-climatic-data-extraction-and-projection","dir":"","previous_headings":"Example: mappestRisk workflow","what":"3. Climatic data extraction and projection","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"optimal thermal boundaries used spatial projection pest risk. map_risk() function automatically downloads temperature data SpatRaster format WorldClim masked user-defined region area, calculates number months per year highly suitable temperatures pest development.","code":"risk_rast <- map_risk(t_vals = boundaries,                        region = \"Réunion\",                          path = tempdir() # directory to download climate data                        )"},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"citation","dir":"","previous_headings":"Example: mappestRisk workflow","what":"Citation","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"using package, please cite :","code":"citation(\"mappestRisk\")  To cite package 'mappestRisk' in publications use:    San-Segundo Molina D, Barbosa A, Pérez-Luque A, Rodríguez-Sánchez F   (2025). _mappestRisk: An R package for modelling and mapping risk of   pest development based on known thermal limits_.   <https://ecologyr.github.io/mappestRisk>.  A BibTeX entry for LaTeX users is    @Manual{,     title = {mappestRisk: An R package for modelling and mapping risk of pest development based on   known thermal limits},     author = {Darío {San-Segundo  Molina} and A. Márcia Barbosa and Antonio Jesús Pérez-Luque and Francisco Rodríguez-Sánchez},     year = {2025},     url = {https://ecologyr.github.io/mappestRisk},   }"},{"path":"https://ecologyr.github.io/mappestRisk/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Create Maps Forecasting Risk of Pest Occurrence","text":"development software funded Fondo Europeo de Desarrollo Regional (FEDER) Consejería de Transformación Económica, Industria, Conocimiento y Universidades Junta de Andalucía (proyecto US-1381388, Universidad de Sevilla).","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/aphid.html","id":null,"dir":"Reference","previous_headings":"","what":"Brachycaudus schwartzi whole life cycle development rate across temperatures — aphid","title":"Brachycaudus schwartzi whole life cycle development rate across temperatures — aphid","text":"modified data set Table 1 Satar Yokomi (2002) days development Brachycaudus schwartzi across different constant temperatures life stages","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/aphid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brachycaudus schwartzi whole life cycle development rate across temperatures — aphid","text":"","code":"data(aphid)"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/aphid.html","id":"aphid","dir":"Reference","previous_headings":"","what":"aphid","title":"Brachycaudus schwartzi whole life cycle development rate across temperatures — aphid","text":"data frame 7 rows 5 columns. workflow reproducible available /data-raw folder mappestRisk GitHub repository, includes original summarized data set -satar_data.xlsx- R script dev. days dev. rate conversion prepare_aphid.R. reference \"Satar2002\" refers source paper cited section Source. temperature Temperature treatments (ºC). dev_days Development days (.e., days fulfill development requirements life-stage following) rate_value Rate Development (1/days), reciprocal Development days, see dev_days stage Life stage instar evaluated. case, data whole immature stages (.e., nymphs) used","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/aphid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Brachycaudus schwartzi whole life cycle development rate across temperatures — aphid","text":"Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602. https://doi.org/10.1603/0013-8746(2002)095[0597:EOTAHO]2.0.CO;2. Licence: CC -NC 3.0 (modified material).","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/available_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Available Models Table — available_models","title":"Available Models Table — available_models","text":"Table containing available models fit using fit_devmodels(). models come two packages: devRate  rTPC .","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/available_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available Models Table — available_models","text":"","code":"data(\"available_models\")"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/available_models.html","id":"available-models","dir":"Reference","previous_headings":"","what":"available_models","title":"Available Models Table — available_models","text":"data.frame/tibble 13 rows 6 columns: model_name Model name used within fit_devmodels(). package names packages used fit_devmodels() obtain appropriate start values user-provided data. package rTPC package, start values automatically computed rTPC::get_start_vals(), turn relies nls.multstart::nls_multstart(). package devRate package, iterative starting values computed using nls.multstart::nls_multstart(), using parameters published devRate::devRateEqStartVal() first attempts iterate. exception, model_name == \"briere1\", generic starting values provided advised user due unrealistic value parameters devRate data set. source_model_name name function source packages rTPC devRate. formula, working_formula, n_params formulas used model fitting.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/available_models.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Available Models Table — available_models","text":"Rebaudo, F., Struelens, Q., Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package r. Methods Ecol Evol. 9: 1144-1150. https://doi.org/10.1111/2041-210X.12935Padfield, D., O´Sullivan, H., Pawar, S., (2021). rTPC nls.multstart: new pipeline fit thermal performance curves r. Methods Ecol Evol. 12: 1138-1143 https://doi.org/10.1111/2041-210X.13585.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/country_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Country names — country_names","title":"Country names — country_names","text":"Country names","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/country_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country names — country_names","text":"","code":"country_names"},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/country_names.html","id":"country-names","dir":"Reference","previous_headings":"","what":"country_names","title":"Country names — country_names","text":"character vector country names (length = 231 countries)","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/country_names.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Country names — country_names","text":"https://gadm.org","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Thermal Performance Curves — fit_devmodels","title":"Fit Thermal Performance Curves — fit_devmodels","text":"Fit nonlinear regression models data representing development rate changes temperature (known Thermal Performance Curves), based nls.multstart::nls_multstart() approach development rate data across temperatures. fitting procedure built upon previous packages starting values estimation, namely rTPC devRate.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Thermal Performance Curves — fit_devmodels","text":"","code":"fit_devmodels(temp = NULL, dev_rate = NULL, model_name = NULL)"},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fit Thermal Performance Curves — fit_devmodels","text":"dataset used example originally published Satar & Yokomi (2022) CC--NC license","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Thermal Performance Curves — fit_devmodels","text":"temp vector temperatures used experiment. least four different temperatures must contain numbers without missing values. dev_rate vector estimated development rates corresponding temperature. rates calculated inverse number days complete transition beginning certain life stage beginning following temperature. must numeric length temp. model_name string vector specifies model(s) use fitting Thermal Performance Curves. Options include \"\" specific models listed available_models. models typically exhibit common unimodal, left-skewed shape.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Thermal Performance Curves — fit_devmodels","text":"table tibble format estimates standard errors parameter models specified user adequately converged. Models sorted based Akaike Information Criterion (AIC) values, best fitting models shown first. Fitted models also provided list format model_list column can accessed using get_fitted_model() inspection. important consider ecological criteria alongside statistical information. additional help model selection, recommend using plot_devmodels() consulting relevant literature.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Thermal Performance Curves — fit_devmodels","text":"Angilletta, M.J., (2006). Estimating comparing thermal performance curves. J. Therm. Biol. 31: 541-545. (model selection TPC framework) Padfield, D., O'Sullivan, H. Pawar, S. (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecol Evol. 12: 1138-1143. Rebaudo, F., Struelens, Q. Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package R. Methods Ecol Evol. 9: 1144-1150. Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/fit_devmodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Thermal Performance Curves — fit_devmodels","text":"","code":"data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = c(\"lactin2\", \"briere2\", \"mod_weibull\")                              ) #> fitting model lactin2 #> fitting model briere2 #> fitting model mod_weibull fitted_tpcs #> # A tibble: 12 × 8 #>    model_name  param_name start_vals  param_est   param_se model_AIC model_BIC #>    <chr>       <chr>           <dbl>      <dbl>      <dbl>     <dbl>     <dbl> #>  1 lactin2     a              0.119   0.0692     0.0463        -42.2     -42.5 #>  2 lactin2     b             -0.254  -0.283      0.402         -42.2     -42.5 #>  3 lactin2     tmax          32.5    41.3        7.75          -42.2     -42.5 #>  4 lactin2     delta_t        7.5    13.5        6.98          -42.2     -42.5 #>  5 briere2     tmin          15      10.0        2.33          -42.6     -42.9 #>  6 briere2     tmax          32.5    36.5        3.40          -42.6     -42.9 #>  7 briere2     a              0.0002  0.0000416  0.0000534     -42.6     -42.9 #>  8 briere2     b              3       1.12       0.594         -42.6     -42.9 #>  9 mod_weibull a              0.112   0.143      0.00495       -44.7     -45.0 #> 10 mod_weibull topt          25      26.8        0.520         -44.7     -45.0 #> 11 mod_weibull b             17.5    30.0       16.2           -44.7     -45.0 #> 12 mod_weibull c              4       4.27       2.60          -44.7     -45.0 #> # ℹ 1 more variable: model_fit <list>"},{"path":"https://ecologyr.github.io/mappestRisk/reference/get_fitted_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fitted model object — get_fitted_model","title":"Get fitted model object — get_fitted_model","text":"Get fitted model object","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/get_fitted_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fitted model object — get_fitted_model","text":"","code":"get_fitted_model(fitted_df = NULL, model_name = NULL)"},{"path":"https://ecologyr.github.io/mappestRisk/reference/get_fitted_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fitted model object — get_fitted_model","text":"fitted_df table fitted models, produced fit_devmodels(). model_name Character. Name fitted model, see available_models.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/get_fitted_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fitted model object — get_fitted_model","text":"model object","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/get_fitted_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fitted model object — get_fitted_model","text":"","code":"data(\"aphid\")  fitted_tpcs_aphid <- fit_devmodels(temp = aphid$temperature,                                    dev_rate = aphid$rate_value,                                    model_name = c(\"lactin2\", \"briere2\", \"ratkowsky\")                                    ) #> fitting model lactin2 #> fitting model briere2 #> fitting model ratkowsky get_fitted_model(fitted_tpcs_aphid, \"briere2\") #> Nonlinear regression model #>   model: dev_rate ~ rTPC::briere2_1999(temp, tmin, tmax, a, b) #>    data: data #>      tmin      tmax         a         b  #> 1.003e+01 3.651e+01 4.162e-05 1.125e+00  #>  residual sum-of-squares: 0.0002223 #>  #> Number of iterations to convergence: 18  #> Achieved convergence tolerance: 1.49e-08"},{"path":"https://ecologyr.github.io/mappestRisk/reference/map_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Map pest risk — map_risk","title":"Map pest risk — map_risk","text":"function produces raster map pixel shows number months per year temperature within given set bounds. input several pairs minimum maximum temperatures (produced therm_suit_bounds()), output raster two layers: mean standard deviation.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/map_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map pest risk — map_risk","text":"","code":"map_risk(   t_vals = NULL,   t_rast = NULL,   region = NULL,   res = 2.5,   path = NULL,   mask = TRUE,   verbose = FALSE,   plot = TRUE,   interactive = FALSE )"},{"path":"https://ecologyr.github.io/mappestRisk/reference/map_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map pest risk — map_risk","text":"t_vals data.frame dplyr::tibble() produced therm_suit_bounds(). t_vals must contain results derived single model. must contain least one row numeric values. Additionally, minimum (\"left\") thermal boundary tval_left must lower maximum (\"right\") one, tval_right rows. Nominative columns must present input (.e., model_name, suitability, pred_suit iter). t_rast Optional 12-layer terra::SpatRaster() monthly mean temperatures region interest. provided, global WorldClim raster layers automatically ()loaded using geodata::worldclim_global(), cropped region (provided). Note download can slow first time use function new path. get download error, consider running e.g options(timeout = 500) (). region Optional object specifying region map. Must overlap extent t_rast provided. Can terra::SpatVector() polygon (obtained terra::vect()); sf polygon, case coerced terra::vect()) terra::SpatVector(); character vector country name(s) English (see country_names), case climate maps downloaded countries; terra::SpatExtent() object (obtained terra::ext()); numeric vector length 4 specifying region coordinates follows: c(xmin, xmax, ymin, ymax). latter two must CRS ast_rast t_rast provided, unprojected lon-lat coordinates (WGS84, EPSG:4326) otherwise. NULL, output maps cover entire t_rast provided, entire world otherwise. res Argument pass geodata::worldclim_global() specifying spatial resolution raster maps download, t_rast provided. default 2.5 arc-minutes. Beware lower values (e.g., 0.5) may lead extremely heavy data sets large computation times. path Argument pass geodata::worldclim_global() (t_rast provided) /geodata::world() (region vector country names) specifying folder path downloaded maps. mask Logical value pass terra::mask() specifying whether output raster maps masked borders target 'region', polygon map vector country names. default TRUE. FALSE, entire rectangular extent 'region' used. verbose Logical value specifying whether display messages function possibly slow steps. default FALSE. Setting TRUE can useful checking progress maps large. plot Logical value specifying whether plot results map. Defaults TRUE. Note function always return terra::SpatRaster() object even plot = TRUE. interactive Logical value specifying whether plotted map interactive (plot=TRUE). default TRUE 'leaflet' package installed.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/map_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map pest risk — map_risk","text":"function returns terra::SpatRaster() 2 layers: (mean()) number months temperature within species' thermal bounds; (t_vals >1 rows) standard deviation (stats::sd()) around mean.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/map_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map pest risk — map_risk","text":"","code":"if (FALSE) { # interactive() data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = \"all\")  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus schwartzi\",                life_stage = \"Nymphs\")  # Obtain prediction TPCs with bootstraps for propagating uncertainty: boot_tpcs <- predict_curves(temp = aphid$temperature,                             dev_rate = aphid$rate_value,                             fitted_parameters = fitted_tpcs,                             model_name_2boot = c(\"lactin2\", \"briere2\", \"beta\"),                             propagate_uncertainty = TRUE,                             n_boots_samples = 10)  print(boot_tpcs)  # Plot bootstrapped curves:  plot_uncertainties(temp = aphid$temperature,                    dev_rate = aphid$rate_value,                    bootstrap_tpcs = boot_tpcs,                    species = \"Brachycaudus schwartzi\",                    life_stage = \"Nymphs\")  # Calculate Q80 thermal bounds  boundaries <- therm_suit_bounds(preds_tbl = boot_tpcs,                                 model_name = \"lactin2\",                                 suitability_threshold = 80) head(boundaries)  # Extract and Plot Risk maps  # if you don't have temperature rasters for your region:  risk_map_reunion <- map_risk(t_vals = boundaries,                              path = tempdir(), # directory to download data                              region = \"Réunion\",                              mask = TRUE,                              plot = TRUE,                              interactive = FALSE,                              verbose = TRUE)  # If you already have a raster of monthly average temperatures # for your region of interest, you can use that as input for `t_rast`: ## first, load it tavg_file <- system.file(\"extdata/tavg_reunion.tif\", package = \"mappestRisk\") tavg_rast <- terra::rast(tavg_file)  ## then apply the function risk_map_reunion <- map_risk(t_vals = boundaries,                              t_rast = tavg_rast,                              mask = TRUE,                              path = tempdir(),                              plot = TRUE,                              interactive = FALSE,                              verbose = TRUE)  # Using a spatial object for `region` sobrarbe <- terra::vect(system.file(\"extdata/sobrarbe.gpkg\",                                    package = \"mappestRisk\"))  risk_map_sobrarbe <- map_risk(t_vals = boundaries,                               region = sobrarbe,                               path = tempdir(),                               mask = TRUE,                               plot = TRUE,                               interactive = FALSE,                               verbose = TRUE) }"},{"path":"https://ecologyr.github.io/mappestRisk/reference/mappestRisk-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mappestRisk: Create Maps Forecasting Risk of Pest Occurrence — mappestRisk-package","title":"mappestRisk: Create Maps Forecasting Risk of Pest Occurrence — mappestRisk-package","text":"'mappestRisk' three different modules: (1) model fitting & selection using set commonly used equations describing developmental responses temperature helped already existing R packages using equation helpers 'rTPC' (Padfield et al. 2021, doi:10.1111/2041-210X.13585 ), visualization model predictions guide ecological criteria model selection; (2) calculation suitability thermal limits, consist temperature interval delimiting optimal performance zone suitability; (3) climatic data extraction & visualization either exportable rasters, static map images html, interactive maps.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/mappestRisk-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mappestRisk: Create Maps Forecasting Risk of Pest Occurrence — mappestRisk-package","text":"Maintainer: Darío San-Segundo Molina dario.ssm2@gmail.com (ORCID) Authors: . Márcia Barbosa (ORCID) Antonio Jesús Pérez-Luque ajpelu@gmail.com (ORCID) Francisco Rodríguez-Sánchez f.rodriguez.sanc@gmail.com (ORCID)","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fitted thermal performance curves — plot_devmodels","title":"Plot fitted thermal performance curves — plot_devmodels","text":"Plot predicted development rates across temperatures based fitted Thermal Performance Curves (TPCs) one several models displayed facets.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fitted thermal performance curves — plot_devmodels","text":"","code":"plot_devmodels(   temp = NULL,   dev_rate = NULL,   fitted_parameters = NULL,   species = NULL,   life_stage = NULL )"},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Plot fitted thermal performance curves — plot_devmodels","text":"dataset used example originally published Satar & Yokomi (2022) CC--NC license","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fitted thermal performance curves — plot_devmodels","text":"temp vector temperatures used experiment. least four different temperatures must contain numbers without missing values. dev_rate vector estimated development rates corresponding temperature. rates calculated inverse number days complete transition beginning certain life stage beginning following temperature. must numeric length temp. fitted_parameters tibble obtained fit_devmodels(), including parameter names, estimates, standard errors, AICs,  objects (fitted_models) using nls.multstart::nls_multstart() approach. species string target species constitute plot title. Must type \"character\". life_stage string target life stage constitute plot subtitle. Must type \"character\".","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fitted thermal performance curves — plot_devmodels","text":"plot predicted values (development rate) across temperatures models adequately converged using fit_devmodels() function.  object, can assigned user-defined object.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot fitted thermal performance curves — plot_devmodels","text":"Angilletta, M.J., (2006). Estimating comparing thermal performance curves. J. Therm. Biol. 31: 541-545. (model selection TPC framework) Padfield, D., O'Sullivan, H. Pawar, S. (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecol Evol. 12: 1138-1143. Rebaudo, F., Struelens, Q. Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package R. Methods Ecol Evol. 9: 1144-1150. Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_devmodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fitted thermal performance curves — plot_devmodels","text":"","code":"data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = c(\"lactin2\", \"briere2\", \"mod_weibull\")) #> fitting model lactin2 #> fitting model briere2 #> fitting model mod_weibull  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus schwartzi\",                life_stage = \"Nymphs\")"},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"Draw bootstrapped Thermal Performance Curves (TPCs) visualize uncertainty parameter estimation TPC fitting","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"","code":"plot_uncertainties(   temp = NULL,   dev_rate = NULL,   bootstrap_tpcs = NULL,   species = NULL,   life_stage = NULL,   alpha = 0.2 )"},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"dataset used example originally published Satar & Yokomi (2022) CC--NC license","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"temp vector temperatures used experiment. least four different temperatures must contain numbers without missing values. dev_rate vector estimated development rates corresponding temperature. rates calculated inverse number days complete transition beginning certain life stage beginning following temperature. must numeric length temp. bootstrap_tpcs tibble tibble object produced predict_curves(), containing bootstrapped TPCs propagate uncertainty. species string target species constitute plot title. Must type \"character\". life_stage string target life stage constitute plot subtitle. Must type \"character\". alpha number 0 1 choose transparency bootstrapped curves (0 = complete transparency, 1 = solid line).","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"ggplot object containing visual representation estimate TPC bootstrapped uncertainty curves ribbon. model represented facet, data points also explicit.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"Angilletta, M.J., (2006). Estimating comparing thermal performance curves. J. Therm. Biol. 31: 541-545. (model selection TPC framework) Padfield, D., O'Sullivan, H. Pawar, S. (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecol Evol. 12: 1138-1143. Rebaudo, F., Struelens, Q. Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package R. Methods Ecol Evol. 9: 1144-1150. Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/plot_uncertainties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw bootstrapped Thermal Performance Curves (TPCs) to visualize uncertainty in parameter estimation of TPC fitting — plot_uncertainties","text":"","code":"if (FALSE) { # interactive() data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = \"all\")  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus swartzi\",                life_stage = \"Nymphs\")  # Obtain prediction TPCs with bootstraps for propagating uncertainty: boot_tpcs <- predict_curves(temp = aphid$temperature,                             dev_rate = aphid$rate_value,                             fitted_parameters = fitted_tpcs,                             model_name_2boot = c(\"lactin2\", \"briere2\", \"beta\"),                             propagate_uncertainty = TRUE,                             n_boots_samples = 10)  print(boot_tpcs)  # Plot bootstrapped curves:  plot_uncertainties(temp = aphid$temperature,                    dev_rate = aphid$rate_value,                    bootstrap_tpcs = boot_tpcs,                    species = \"Brachycaudus schwartzi\",                    life_stage = \"Nymphs\") }"},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"Propagate parameter uncertainty TPC fits using bootstrap residual resampling","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"","code":"predict_curves(   temp = NULL,   dev_rate = NULL,   fitted_parameters = NULL,   model_name_2boot = NULL,   propagate_uncertainty = TRUE,   n_boots_samples = 100 )"},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"dataset used example originally published Satar & Yokomi (2022) CC--NC license","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"temp vector temperatures used experiment. least four different temperatures must contain numbers without missing values. dev_rate vector estimated development rates corresponding temperature. rates calculated inverse number days complete transition beginning certain life stage beginning following temperature. must numeric length temp. fitted_parameters tibble obtained fit_devmodels() function, including parameter names, estimates, standard errors, AICs,  objects (fitted_models) using nls.multstart::nls_multstart() approach. model_name_2boot vector strings including one several TPC models fitted fit_devmodels(). Contrarily function, model_name_2boot = \"\" allowed function due slow bootstrapping procedure. recommend applying function small pre-selection models (e.g., one four) based statistical ecological criteria help plot_devmodels() function. propagate_uncertainty logical argument specifies whether propagate parameter uncertainty bootstrap residual resampling. FALSE, function returns predictions fitted TPCs selected model(s). TRUE, bootstrap applied using residual resampling obtain multiple TPCs detailed vignettes rTPC package. Defaults TRUE. n_boots_samples Number bootstrap resampling iterations (default 100). larger number iterations makes resampling procedure robust, typically 100 sufficient propagating parameter uncertainty, increasing n_boots_samples increase computation time predicting resampled TPCs.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"tibble object many curves (TPCs) number iterations provided n_boots_samples argument propagate_uncertainty = TRUE minus bootstrap samples fitted (.e., new nonlinear regression models converge ). Otherwise, returns just one prediction TPC model fit estimates. resampled TPC consists collection predictions set temperatures temp - 20 temp + 15 resolution 0.1°C unique identifier called boots_iter. addition uncertainty TPCs, estimated TPC also explicit output tibble.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"Angilletta, M.J., (2006). Estimating comparing thermal performance curves. J. Therm. Biol. 31: 541-545. (model selection TPC framework) Padfield, D., O'Sullivan, H. Pawar, S. (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecol Evol. 12: 1138-1143. Rebaudo, F., Struelens, Q. Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package R. Methods Ecol Evol. 9: 1144-1150. Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/predict_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propagate parameter uncertainty of TPC fits using bootstrap with residual resampling — predict_curves","text":"","code":"if (FALSE) { # interactive() data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = \"all\")  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus schwartzi\",                life_stage = \"Nymphs\")  # Obtain prediction TPCs with bootstraps for propagating uncertainty: boot_tpcs <- predict_curves(temp = aphid$temperature,                             dev_rate = aphid$rate_value,                             fitted_parameters = fitted_tpcs,                             model_name_2boot = c(\"lactin2\", \"briere2\", \"beta\"),                             propagate_uncertainty = TRUE,                             n_boots_samples = 10)  boot_tpcs }"},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"Calculate thermal boundaries define suitable region Thermal Performance Curve (TPC) corresponding user-defined optimal performance level.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"","code":"therm_suit_bounds(   preds_tbl = NULL,   model_name = NULL,   suitability_threshold = NULL )"},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"dataset used example originally published Satar & Yokomi (2022) CC--NC license","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"preds_tbl tibble object produced predict_curves(). model_name character. Name one several TPC models fitted first fit_devmodels() predicted next predict_curves(). using model_name = \"\" models contained preds_tbl used. suitability_threshold numeric value 50 100 representing quantile curve provides user-defined optimal performance. instance, setting suitability_threshold 80 identifies top 20% (quantile 80) maximum values development rate predicted chosen TPC model. suitability_threshold equals 100, function returns optimum temperature development rate.","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"tibble six columns: model_name: string indicating selected TPC model used projections. suitability: string indicating suitability threshold percentage (see suitability_threshold). tval_left: number representing lower thermal boundary delimiting suitable region TPC. tval_right: number representing upper thermal boundary delimiting suitable region TPC. pred_suit: number corresponding predicted development rate value determining chosen quantile threshold maximum rate (.e., suitability percentage maximum rate). iter: string determining TPC identity bootstrapping procedure predict_curves() function, estimate represents estimated TPC fitted fit_devmodels().","code":""},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"Angilletta, M.J., (2006). Estimating comparing thermal performance curves. J. Therm. Biol. 31: 541-545. (model selection TPC framework) Padfield, D., O'Sullivan, H. Pawar, S. (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecol Evol. 12: 1138-1143. Rebaudo, F., Struelens, Q. Dangles, O. (2018). Modelling temperature-dependent development rate phenology arthropods: devRate package R. Methods Ecol Evol. 9: 1144-1150. Satar, S. Yokomi, R. (2002). Effect temperature host development Brachycaudus schwartzi (Homoptera: Aphididae). Ann. Entomol. Soc. . 95: 597-602.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/mappestRisk/reference/therm_suit_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Thermal Boundaries for Optimal Performance Level — therm_suit_bounds","text":"","code":"if (FALSE) { # interactive() data(\"aphid\")  fitted_tpcs <- fit_devmodels(temp = aphid$temperature,                              dev_rate = aphid$rate_value,                              model_name = \"all\")  plot_devmodels(temp = aphid$temperature,                dev_rate = aphid$rate_value,                fitted_parameters = fitted_tpcs,                species = \"Brachycaudus schwartzi\",                life_stage = \"Nymphs\")  # Obtain prediction TPCs with bootstraps for propagating uncertainty: boot_tpcs <- predict_curves(temp = aphid$temperature,                             dev_rate = aphid$rate_value,                             fitted_parameters = fitted_tpcs,                             model_name_2boot = c(\"lactin2\", \"briere2\", \"beta\"),                             propagate_uncertainty = TRUE,                             n_boots_samples = 10)  print(boot_tpcs)  # Plot bootstrapped curves:  plot_uncertainties(temp = aphid$temperature,                    dev_rate = aphid$rate_value,                    bootstrap_tpcs = boot_tpcs,                    species = \"Brachycaudus schwartzi\",                    life_stage = \"Nymphs\")  # Calculate Q80 thermal bounds  boundaries <- therm_suit_bounds(preds_tbl = boot_tpcs,                                 model_name = \"lactin2\",                                 suitability_threshold = 80) head(boundaries) }"},{"path":"https://ecologyr.github.io/mappestRisk/news/index.html","id":"mappestrisk-010","dir":"Changelog","previous_headings":"","what":"mappestRisk 0.1.0","title":"mappestRisk 0.1.0","text":"First revised version.","code":""}]
